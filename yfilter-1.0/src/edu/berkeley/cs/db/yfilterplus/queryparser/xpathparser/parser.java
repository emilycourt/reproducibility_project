
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Aug 12 02:11:22 PDT 2004
//----------------------------------------------------

package edu.berkeley.cs.db.yfilterplus.queryparser.xpathparser;

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Thu Aug 12 02:11:22 PDT 2004
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\007\005\000\002\007\006\000\002\004\003" +
    "\000\002\004\004\000\002\005\004\000\002\005\004\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\006\004\000\002\011\005\000\002\011\006\000\002\012" +
    "\003\000\002\012\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\003\000\002\015\004\000\002\016\004\000" +
    "\002\016\004\000\002\017\003\000\002\017\004\000\002" +
    "\017\003\000\002\017\004\000\002\014\005\000\002\014" +
    "\006\000\002\013\006\000\002\013\006\000\002\013\003" +
    "\000\002\013\007\000\002\013\007\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\006\007\006\017\007\001\002\000\010\002" +
    "\ufffc\007\ufffc\017\ufffc\001\002\000\010\002\001\007\102" +
    "\017\007\001\002\000\006\006\012\032\013\001\002\000" +
    "\006\006\012\032\013\001\002\000\004\002\011\001\002" +
    "\000\004\002\000\001\002\000\012\002\ufff6\007\ufff6\010" +
    "\017\017\ufff6\001\002\000\020\002\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\015\uffd9\017\uffd9\022\uffd9\001\002\000\010\002" +
    "\ufffa\007\ufffa\017\ufffa\001\002\000\012\002\ufff8\007\ufff8" +
    "\010\017\017\ufff8\001\002\000\012\002\ufff7\007\ufff7\010" +
    "\074\017\ufff7\001\002\000\014\006\024\013\027\014\025" +
    "\020\022\032\013\001\002\000\010\007\067\011\ufff1\017" +
    "\070\001\002\000\014\007\uffea\010\043\011\uffea\015\046" +
    "\017\uffea\001\002\000\004\011\uffe2\001\002\000\010\007" +
    "\uffee\011\uffee\017\uffee\001\002\000\012\007\uffe8\010\043" +
    "\011\uffe8\017\uffe8\001\002\000\006\007\036\017\037\001" +
    "\002\000\004\011\ufff2\001\002\000\004\032\013\001\002" +
    "\000\004\011\031\001\002\000\012\002\ufff4\007\ufff4\010" +
    "\ufff4\017\ufff4\001\002\000\004\022\033\001\002\000\006" +
    "\020\035\021\034\001\002\000\004\011\uffe4\001\002\000" +
    "\004\011\uffe3\001\002\000\006\006\024\032\013\001\002" +
    "\000\006\006\024\032\013\001\002\000\010\007\ufff0\011" +
    "\ufff0\017\ufff0\001\002\000\012\007\uffea\010\043\011\uffea" +
    "\017\uffea\001\002\000\012\007\uffe9\010\062\011\uffe9\017" +
    "\uffe9\001\002\000\010\013\027\020\022\032\013\001\002" +
    "\000\004\011\061\001\002\000\004\015\046\001\002\000" +
    "\004\016\047\001\002\000\016\022\052\023\054\024\051" +
    "\025\053\026\055\027\056\001\002\000\004\020\060\001" +
    "\002\000\004\020\uffdc\001\002\000\006\020\uffdf\021\057" +
    "\001\002\000\004\020\uffdd\001\002\000\004\020\uffde\001" +
    "\002\000\004\020\uffda\001\002\000\004\020\uffdb\001\002" +
    "\000\004\011\uffe0\001\002\000\004\011\uffe1\001\002\000" +
    "\012\007\uffe6\010\uffe6\011\uffe6\017\uffe6\001\002\000\010" +
    "\013\027\020\022\032\013\001\002\000\004\011\064\001" +
    "\002\000\012\007\uffe5\010\uffe5\011\uffe5\017\uffe5\001\002" +
    "\000\010\007\uffef\011\uffef\017\uffef\001\002\000\012\007" +
    "\uffe7\010\062\011\uffe7\017\uffe7\001\002\000\006\006\024" +
    "\032\013\001\002\000\006\006\024\032\013\001\002\000" +
    "\010\007\uffed\011\uffed\017\uffed\001\002\000\010\007\uffeb" +
    "\011\uffeb\017\uffeb\001\002\000\010\007\uffec\011\uffec\017" +
    "\uffec\001\002\000\014\006\024\013\027\014\025\020\022" +
    "\032\013\001\002\000\004\011\076\001\002\000\012\002" +
    "\ufff3\007\ufff3\010\ufff3\017\ufff3\001\002\000\012\002\ufff5" +
    "\007\ufff5\010\074\017\ufff5\001\002\000\010\002\ufff9\007" +
    "\ufff9\017\ufff9\001\002\000\010\002\ufffb\007\ufffb\017\ufffb" +
    "\001\002\000\010\006\012\013\104\032\013\001\002\000" +
    "\004\002\uffff\001\002\000\004\032\013\001\002\000\014" +
    "\002\ufff8\007\ufff8\010\017\015\106\017\ufff8\001\002\000" +
    "\004\016\107\001\002\000\004\002\ufffd\001\002\000\004" +
    "\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\010\003\007\004\004\005\003\001\001\000" +
    "\002\001\001\000\006\005\100\007\102\001\001\000\006" +
    "\006\077\010\014\001\001\000\006\006\013\010\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\015\001\001\000\002\001\001\000\014\010\020\012\027" +
    "\013\025\015\017\017\022\001\001\000\004\016\070\001" +
    "\001\000\004\014\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\040\017\064" +
    "\001\001\000\006\010\040\017\037\001\001\000\002\001" +
    "\001\000\004\014\041\001\001\000\002\001\001\000\006" +
    "\010\044\013\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\044\013\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\040\017\072\001\001\000\006\010\040\017\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\020\012\074\013\025\015\017\017\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\077\010\104" +
    "\001\001\000\002\001\001\000\004\010\107\001\001\000" +
    "\004\011\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public parser (java.io.Reader input) {	
		super(new Lexer(input));
	}

	/* control the output of the parser:
	   - print debugging messages
           - generate an actual Query module list tree in abstract syntax
	*/ 

	static boolean debug = false;
	
	// set debug flag from the command line
	public void setDebug (boolean flag) {
		debug = flag;
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // qname ::= NCNAME 
            {
              Object RESULT = null;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String nc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		if (parser.debug) System.err.println("9 "+nc);
		RESULT = nc; 
	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*qname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparator ::= LESS_THAN_EQUALS 
            {
              Object RESULT = null;
		
			if (parser.debug) System.err.println("<=");
			RESULT = new Integer(sym.LESS_THAN_EQUALS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparator ::= GREATER_THAN_EQUALS 
            {
              Object RESULT = null;
		
			if (parser.debug) System.err.println(">=");
			RESULT = new Integer(sym.GREATER_THAN_EQUALS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparator ::= LESS_THAN 
            {
              Object RESULT = null;
		
			if (parser.debug) System.err.println("<");
			RESULT = new Integer(sym.LESS_THAN);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparator ::= GREATER_THAN 
            {
              Object RESULT = null;
		
			if (parser.debug) System.err.println(">");
			RESULT = new Integer(sym.GREATER_THAN);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparator ::= NOT_EQUALS 
            {
              Object RESULT = null;
		
			if (parser.debug) System.err.println("!=");
			RESULT = new Integer(sym.NOT_EQUALS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparator ::= EQUALS 
            {
              Object RESULT = null;
		
			if (parser.debug) System.err.println("=");
			RESULT = new Integer(sym.EQUALS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*comparator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_predicate ::= qname L_PAREN R_PAREN EQUALS LITERAL 
            {
              Object RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object qn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
				
			String str = qn.toString();
			if (!str.equals("text")) {
				System.err.println("Rule: text() = literal: incorrect function name: " + str);
			}
			String literal = lit.toString();
			literal = literal.substring(literal.indexOf("\"") + 1, literal.lastIndexOf("\""));
			SimplePredicate sp = new SimplePredicate(SimplePredicate.PREDICATE_TEXT, SimplePredicate.OPERATOR_EQ, literal);
			if (parser.debug) System.err.println("4.5 " + sp);
			RESULT = sp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*simple_predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_predicate ::= qname L_PAREN R_PAREN comparator NUMBER 
            {
              Object RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object qn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
				
			String str = qn.toString();
			if (str.equals("text")) {
				if (((Integer) op).intValue() != sym.EQUALS)
					throw new Exception("xpathparser.parser -- only '=' operator is supported after the function text()!");
				SimplePredicate sp = new SimplePredicate(SimplePredicate.PREDICATE_TEXT, SimplePredicate.OPERATOR_EQ, String.valueOf(n));
				if (parser.debug) System.err.println("4.4 " + sp);
				RESULT = sp;
			}
			else if (str.equals("position")) {
				char cop = '\0';
				switch (((Integer) op).intValue()) {	
				case sym.EQUALS:
					cop = SimplePredicate.OPERATOR_EQ;
					break;
				case sym.NOT_EQUALS:
					cop = SimplePredicate.OPERATOR_NE;
					break;
				case sym.GREATER_THAN:
					cop = SimplePredicate.OPERATOR_GT;
					break;
				case sym.GREATER_THAN_EQUALS:
					cop = SimplePredicate.OPERATOR_GE;
					break;
				case sym.LESS_THAN:
					cop = SimplePredicate.OPERATOR_LT;
					break;
				case sym.LESS_THAN_EQUALS:
					cop = SimplePredicate.OPERATOR_LE;
					break;
				default:
					if (parser.debug) System.err.println("Rule: position() op value: incorrect operator: " + op);
					break;
				}
				SimplePredicate sp = new SimplePredicate(SimplePredicate.PREDICATE_POSITION, cop, new Integer(String.valueOf(n)));
				if (parser.debug) System.err.println("4.4 " + sp);			
				RESULT = sp;
			}
			else {
				if (parser.debug) System.err.println("Rule: (position|text)() op value: incorrect function name: " + str);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*simple_predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simple_predicate ::= NUMBER 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			SimplePredicate sp = new SimplePredicate(SimplePredicate.PREDICATE_POSITION, new Integer(String.valueOf(n)));
			if (parser.debug) System.err.println("4.3 " + sp);
			RESULT = sp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*simple_predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simple_predicate ::= AT qname EQUALS NUMBER 
            {
              Object RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object qn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			SimplePredicate sp = new SimplePredicate(SimplePredicate.PREDICATE_ATTRIBUTE, qn.toString(), SimplePredicate.OPERATOR_EQ, String.valueOf(n));
			if (parser.debug) System.err.println("4.2 " + sp);
			RESULT = sp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*simple_predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // simple_predicate ::= AT qname EQUALS LITERAL 
            {
              Object RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object qn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			String literal = lit.toString();
			literal = literal.substring(literal.indexOf("\"") + 1, literal.lastIndexOf("\""));
			SimplePredicate sp = new SimplePredicate(SimplePredicate.PREDICATE_ATTRIBUTE, qn.toString(), SimplePredicate.OPERATOR_EQ, literal);
			if (parser.debug) System.err.println("4.1 " + sp);
			RESULT = sp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*simple_predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simple_predicate1 ::= simple_predicate1 L_BRACKET simple_predicate R_BRACKET 
            {
              Object RESULT = null;
		int sp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				((ArrayList) sp1).add(sp);
				if (parser.debug) System.err.println("6.2.2 " + sp1);
				RESULT = sp1;
			
              CUP$parser$result = new java_cup.runtime.Symbol(10/*simple_predicate1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simple_predicate1 ::= L_BRACKET simple_predicate R_BRACKET 
            {
              Object RESULT = null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
				ArrayList arl = new ArrayList();
				arl.add(sp);
				if (parser.debug) System.err.println("6.2.1 " + arl);
				RESULT = arl;
			
              CUP$parser$result = new java_cup.runtime.Symbol(10/*simple_predicate1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // simple_step_expr ::= STAR simple_predicate1 
            {
              Object RESULT = null;
		int sp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object sp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				StepExpression se = new StepExpression("*", (ArrayList) sp1);
				if (parser.debug) System.err.println("6.1.4 " + se);
				RESULT = se;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*simple_step_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // simple_step_expr ::= STAR 
            {
              Object RESULT = null;
		
				StepExpression se = new StepExpression("*");
				if (parser.debug) System.err.println("6.1.3 " + se);
				RESULT = se;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*simple_step_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // simple_step_expr ::= qname simple_predicate1 
            {
              Object RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object qn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object sp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				StepExpression se = new StepExpression(qn.toString(), (ArrayList) sp1);
				if (parser.debug) System.err.println("6.1.2 " + se);
				RESULT = se;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*simple_step_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simple_step_expr ::= qname 
            {
              Object RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object qn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				StepExpression se = new StepExpression(qn.toString());
				if (parser.debug) System.err.println("6.1.1 " + se);
				RESULT = se;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*simple_step_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simple_step_expr1 ::= DOUBLE_SLASH simple_step_expr 
            {
              Object RESULT = null;
		int sseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object sse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

				((StepExpression) sse).setAxis(StepExpression.DESCENDANT);
				if (parser.debug) System.err.println("5.2.2 " + sse);
				RESULT = sse;
			
              CUP$parser$result = new java_cup.runtime.Symbol(12/*simple_step_expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simple_step_expr1 ::= SLASH simple_step_expr 
            {
              Object RESULT = null;
		int sseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object sse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

				((StepExpression) sse).setAxis(StepExpression.CHILD);
				if (parser.debug) System.err.println("5.2.1 " + sse);
				RESULT = sse;
			
              CUP$parser$result = new java_cup.runtime.Symbol(12/*simple_step_expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // path_predicate ::= path_predicate simple_step_expr1 
            {
              Object RESULT = null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sse1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sse1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object sse1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

			((PathPredicate) pp).addStepExpr((StepExpression) sse1);
			if (parser.debug) System.err.println("5.1.4 " + pp);
			RESULT = pp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(11/*path_predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // path_predicate ::= simple_step_expr 
            {
              Object RESULT = null;
		int sseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object sse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		    ((StepExpression)sse).setAxis(StepExpression.CHILD);
			if (parser.debug) System.err.println("5.1.3 " + sse);
			RESULT = new PathPredicate((StepExpression) sse);
		
              CUP$parser$result = new java_cup.runtime.Symbol(11/*path_predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // path_predicate ::= DOT SLASH simple_step_expr 
            {
              Object RESULT = null;
		int sseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object sse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		    ((StepExpression)sse).setAxis(StepExpression.CHILD);
			if (parser.debug) System.err.println("5.1.2 " + sse);
			RESULT = new PathPredicate((StepExpression) sse);
		
              CUP$parser$result = new java_cup.runtime.Symbol(11/*path_predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // path_predicate ::= DOT DOUBLE_SLASH simple_step_expr 
            {
              Object RESULT = null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			((StepExpression)se).setAxis(StepExpression.DESCENDANT);
			if (parser.debug) System.err.println("5.1.1 " + se);
			RESULT = new PathPredicate((StepExpression) se);
		
              CUP$parser$result = new java_cup.runtime.Symbol(11/*path_predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // predicate ::= path_predicate 
            {
              Object RESULT = null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			
			if (parser.debug) System.err.println("3.2 "+pp);
			RESULT = pp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // predicate ::= simple_predicate 
            {
              Object RESULT = null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object sp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if (parser.debug) System.err.println("3.1 "+sp);
			RESULT = sp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // predicate1 ::= predicate1 L_BRACKET predicate R_BRACKET 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
			if (parser.debug) System.err.println("2.2.2 " + p1);
			((ArrayList) p1).add(p);
			RESULT = p1;
		
              CUP$parser$result = new java_cup.runtime.Symbol(7/*predicate1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // predicate1 ::= L_BRACKET predicate R_BRACKET 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			ArrayList arl = new ArrayList();
			arl.add(p);
			if (parser.debug) System.err.println("2.2.1" + arl);
			RESULT = arl; 
		
              CUP$parser$result = new java_cup.runtime.Symbol(7/*predicate1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // step_expr ::= STAR predicate1 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			StepExpression se = new StepExpression("*", (ArrayList) p1);
			if (parser.debug) System.err.println("2.1.4" + se);
			RESULT = se;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*step_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // step_expr ::= STAR 
            {
              Object RESULT = null;
		
			StepExpression se = new StepExpression("*");
			if (parser.debug) System.err.println("2.1.3" + se);
			RESULT = se;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*step_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // step_expr ::= qname predicate1 
            {
              Object RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object qn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		   
			StepExpression se = new StepExpression((String) qn, (ArrayList) pd1);
			if (parser.debug) System.err.println("2.1.2 " + se);
			RESULT = se;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*step_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // step_expr ::= qname 
            {
              Object RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object qn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			if (parser.debug) System.err.println("2.1.1 "+qn);
			RESULT = new StepExpression((String) qn); 
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*step_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // step_expr1 ::= SLASH step_expr 
            {
              Object RESULT = null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			((StepExpression) se).setAxis(StepExpression.CHILD);
			if (parser.debug) System.err.println("1.3.2" + se);
			RESULT = se;
		
              CUP$parser$result = new java_cup.runtime.Symbol(3/*step_expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // step_expr1 ::= DOUBLE_SLASH step_expr 
            {
              Object RESULT = null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			((StepExpression) se).setAxis(StepExpression.DESCENDANT);
			if (parser.debug) System.err.println("1.3.1" + se);
			RESULT = se;
		
              CUP$parser$result = new java_cup.runtime.Symbol(3/*step_expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // path_expr1 ::= path_expr1 step_expr1 
            {
              Object RESULT = null;
		int pe1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pe1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pe1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			((PathQuery) pe1).addStepExpr((StepExpression) se1);
			if (parser.debug) System.err.println("1.2.2 " + pe1);
			RESULT = pe1;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*path_expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // path_expr1 ::= step_expr1 
            {
              Object RESULT = null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			PathQuery pq = new PathQuery((StepExpression) se1);
			if (parser.debug) System.err.println("1.2.1: " + pq);
			RESULT = pq;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*path_expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // additional_select ::= SLASH qname L_PAREN R_PAREN 
            {
              Object RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object qn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		    if (!qn.equals("text")) {
		        throw new Exception("xpathparser.parser -- function at the end of the path expression is not supported!");
		    }
			if (parser.debug) System.err.println("as text: " + qn);
			RESULT = qn + "()";
		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*additional_select*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // additional_select ::= SLASH AT qname 
            {
              Object RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object qn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if (parser.debug) System.err.println("as attr: " + qn);
			RESULT = qn;
		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*additional_select*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // path_expr ::= path_expr1 additional_select 
            {
              Object RESULT = null;
		int pe1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pe1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pe1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

			if (((String) as).startsWith("text()")) {
				((PathQuery) pe1).addExtraTextSelect();	
			} else {
				((PathQuery) pe1).addExtraAttrSelect(as.toString());	
			}

			if (parser.debug) System.err.println("1.1.2 " + pe1);
			RESULT = pe1;
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*path_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= path_expr EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // path_expr ::= path_expr1 
            {
              Object RESULT = null;
		int pe1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if (parser.debug)
				System.err.println("1.1.1"+pe1);
			RESULT = pe1;
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*path_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

